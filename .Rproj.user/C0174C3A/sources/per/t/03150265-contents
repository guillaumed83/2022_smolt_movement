library(gtools)
library(coda)
library(R2jags) #more flexible to calculate WAIC and deviance
library(boot)
library(tidyverse)
library(MCMCvis)
library(mcmcplots)
library(janitor)
library(sjmisc)
library(ggplot2)
library(scales) 
library(viridis)
library(png)

### Original State-space model developed by G.Dauphin in October 2022
### Last update on the model file in January 2023
### Script modified and streamlined for publication in November 2024

set.seed(20230122)
par.default <- par()

## Loading the data and initial values used in the model
load("R_Data/data_inits_jags.Rdata")

## Parameters for the length of the MCMC inference 
n_burnin <- 9800
n_iter <- 350000
n_thin <- 100
n_chain <-3
(n_iter - n_burnin)/n_thin  * n_chain

## Parameters of interest
monitor=c('p_RP1','p_MM','p_Rx1','p_R1a','p_R1b','p_R2a','p_Rx2b','p_Rx2a','p_R2b','p_R3a','p_R3b','p_Rest', 
          ## probability to chose various channels 
          'p_Z1a', 'p_Z2a','p_Z2b','p_dodge','p_Z3b',  'p_Z5b_Z4a','p_Z5b_Z4ab', #'p_Z4b','p_Z4b2',
          ## Channel location
          'Z1_a','Z1_b','Z2_a','Z2_ab','Z2_b','Z3_a' ,'Z3_ab_dodge' ,'Z3_ab_no_dodge','Z3_b','Z4_a','Z4_ab','Z4_b','Z5_a','Z5_b'
)

## Jags Call - all output of the model are stored into jags_M_5

# jags_M_5 <- jags(model.file="Model/M_5.bug",
#                  data=data_ac,
#                  inits=inits_ac_M5,
#                  parameters.to.save = monitor,
#                  n.chains=3,
#                  n.burnin = n_burnin,
#                  n.iter = n_iter,
#                  n.thin= n_thin)
# 

## Saving the output so we don't have to re-run each time we look at it
# save(jags_M_5,file="C:/_Back-up_2023-09/smolts_restigouche/_downstream_acoustic_tracking/Output/M_5_output.RData") 

## once the model has run, we can just load the jags object
load("R_Data/Jags_output.Rdata")

list_par <- jags_M_5$parameters.to.save

### Diagnostics ####
#### Trace of all parameters ####
pdf("Output/M_5_Traceplot_param.pdf",width=15,height=4)
for(i in 1:length(list_par)){
  traceplot(jags_M_5,varname=list_par[i],ask=F)
}
dev.off()

attach.jags(jags_M_5)

## Setting up a bunch of vectors containing relevant parameters names for easy access
p_detect_names <- c('p_RP1','p_MM','p_Rx1','p_R1a','p_R1b','p_R2a','p_Rx2b','p_Rx2a','p_R2b','p_R3a','p_R3b','p_Rest')
p_travel_names <- c('p_Z1a', 'p_Z2a','p_Z2b','p_dodge','p_Z3b',  'p_Z5b_Z4a','p_Z5b_Z4ab' )
channel_location_names <- c('Z1_a','Z1_b','Z2_a','Z2_ab','Z2_b','Z3_a' ,'Z3_ab_dodge' ,'Z3_ab_no_dodge','Z3_b','Z4_a','Z4_ab','Z4_b','Z5_a','Z5_b')

## Extracting MCMC for p detect and p travel
p_detect_sum <- jags_M_5$BUGSoutput$summary[row.names(jags_M_5$BUGSoutput$summary)%in%p_detect_names,]
p_travel_sum <- jags_M_5$BUGSoutput$summary[row.names(jags_M_5$BUGSoutput$summary)%in%p_travel_names,]

## Writing summaries of posterior distributions
write.csv(jags_M_5$BUGSoutput$summary,"Output/M5_all_par.csv",row.names = T)
write.csv(p_detect_sum,"Output/M5_p_detect.csv",row.names = T)
write.csv(p_travel_sum,"Output/M5_p_travel.csv",row.names = T)

## Calculating and writing the probabilities to be in a given channel/zone for each individual fish
## and storing them in csv files

mean_channel <- data.frame(matrix(nrow = data_ac$n_fish, ncol = length(channel_location_names)))

for(i in 1:length(channel_location_names)){
  mean_channel[,i] <- apply(eval(parse(text=channel_location_names[i])),2,mean)
}
names(mean_channel)<-channel_location_names

sd_channel <- data.frame(matrix(nrow = data_ac$n_fish, ncol = length(channel_location_names)))
for(i in 1:length(channel_location_names)){
  sd_channel[,i] <- apply(eval(parse(text=channel_location_names[i])),2,sd)
}
names(sd_channel)<-channel_location_names

write.csv(mean_channel,"Output/M5_mean_channel.csv",row.names = F)
write.csv(sd_channel,"Output/M5_sd_channel.csv",row.names = F)

#### Checking potential correlation between probabilities of detection ####
par(mfrow=c(2,2))
plot(p_R1a,p_R1b)
plot(p_R2a,p_Rx2b)
plot(p_Rx2b,p_Rx2a)
plot(p_R3a,p_R3b)

cor(p_R1a,p_R1b)
cor(p_R2a,p_Rx2b)
cor(p_Rx2b,p_Rx2a)
cor(p_R3a,p_R3b)

#### Checking potential correlation between probabilities of travel ####
par(mfrow=c(2,2))
plot(p_Z2a,p_Z2b)
plot(p_Z2a,p_Z3b)
plot(p_Z5b_Z4a,p_Z5b_Z4ab)

cor(p_Z2a,p_Z2b)
cor(p_Z2a,p_Z3b)
cor(p_Z5b_Z4a,p_Z5b_Z4ab)

#### Generating prior/posterior figures for p travel and p detect ####
## found in Suppl material B
prior_p_d <-rbeta(10000000,1,1)

png("Figures/M5_p_detect.png",height = 1200,width=1600,pointsize=24)
par(mfrow=c(3,4),mar=c(4.1,4.1,1.1,2.1))

vec_p <-c(bquote(italic(p["1"])),
          bquote(italic(p["2"])),
          bquote(italic(p["3"])),
          bquote(italic(p["4"])),
          bquote(italic(p["5"])),
          bquote(italic(p["6"])),
          bquote(italic(p["7"])),
          bquote(italic(p["8"])),
          bquote(italic(p["9"])),
          bquote(italic(p["10"])),
          bquote(italic(p["11"])),
          bquote(italic(p["12"]))
         )

for(i in 1:length(p_detect_names)){
  if(i %in% c(1,5,9)){
    hist(eval(parse(text=p_detect_names[i])),freq=F,xlab=vec_p[i],ylab="Density",main="",breaks=50,xlim=c(0,1),col="grey75")
  }else{
    hist(eval(parse(text=p_detect_names[i])),freq=F,xlab=vec_p[i],ylab="",main="",breaks=50,xlim=c(0,1),col="grey75")
  }
  temp_d <-density(prior_p_d,from=0,to=1)
  lines(temp_d,col="red")
  box()
}
dev.off()

png("Figures/M5_p_travel.png",height = 1200,width=1600,pointsize=24)
par(mfrow=c(2,4))

vec_pt <-c(bquote(italic(pt["1,1"])),
           bquote(italic(pt["2,1"])),
           bquote(italic(pt["2,3"])),
           bquote(italic(pt["3,2"])),
           bquote(italic(pt["4,3"])),
           bquote(italic(pt["5,2a"])),
           bquote(italic(pt["5,2b"])))

for(i in 1:length(p_travel_names)){
  if(i %in% c(1,5,9)){
    hist(eval(parse(text=p_travel_names[i])),freq=F,xlab=vec_pt[i],main="",breaks=40,xlim=c(0,1))
  }else{
    hist(eval(parse(text=p_travel_names[i])),freq=F,xlab=vec_pt[i],main="",ylab="",breaks=40,xlim=c(0,1))
  }
  temp_d <-density(prior_p_d,from=0,to=1)
  lines(temp_d,col="red")
  box()
}
dev.off()
####

## Equivalency probability names in the model files 
## versus names used in the MS
##
# P_Z1a = pt1,1
# p_Z2a = pt2,1
# p_Z2b = pt2,3
# p_dodge = pt3,2
# p_Z3b = pt4,3
# p_Z5b_Z4a = pt5,2a
# p_Z5b_Z4ab = pt5,2b  


### Plotting receivers pings and channel position ####
## generates the figures found in Suppl. Mat. C

#### Using google earth image to plot over ####
channel_img <- readPNG("R_Data/Google_Earth_2022_channels.png")

#### Coordinates receivers - upstream/downstream of islands coordinates ####
## Adjusted manually for readibility
## small map
coord_sum <- data.frame(
  names_receivers = c("Rx1","R1a","R1b","R2a","Rx2b","Rx2a","R2b","R3a","R3b"),
  x_coord = c(130,412,548,1122,1254,1278,1443,1552,1550),
  y_coord = 687 - c(424,255,412,260,490,451,518,393,486),
  
  x_text = c(130,412,548,1122,1254,1338,1443,1552,1550),
  y_text = 687 - c(374,205,462,210,540,434,568,343,536),
  col_bg = c("lightskyblue","olivedrab3","hotpink1","olivedrab3","hotpink1","hotpink4","hotpink1","olivedrab3","hotpink1")
)

coord_chan <- data.frame(
  ## Coordinates Channels 
  ## Z1a, Z1b, 
  ## Z2a, Z2ab, z2b, 
  ## Z3a, Z3_ab_dodge, Z3_ab_no_dodge, Z3_b
  ## Z4a, Z4ab, z4b, 
  ## Z5a, Z5b
  x = c(320,320,
        1080,1125 ,1138, 
        1270,1282,1254,1300,
        1392,1373,1405,  
        1514,1515),
  
  y = 687 - c(294,428,
              255,382,457,   
              317,400,440,491,
              400,477,518, 
              399,484)
)

mean_channel <- mean_channel %>% select(Z1_a,Z1_b,
                                        Z2_a,Z2_ab,Z2_b,
                                        Z3_a,Z3_ab_dodge,Z3_ab_no_dodge,Z3_b,
                                        Z4_a,Z4_ab,Z4_b,
                                        Z5_a,Z5_b)

coord_path_1 <-data.frame(
  x=c(181,417,658,875,1043,1253,1394,1450,1550,1660),
  y=687 - 
    c(395,245,205,207,246,310,398,428,391,380),
  I_col = rep(1,10),
  I_path = rep(1,10)
)

coord_path_2 <-data.frame(
  x=c(1450,1497,1529,1663),
  y=687 - 
    c(428,469,485,484),
  I_col = rep(1,4),
  I_path = rep(2,4)
)

coord_path_3 <-data.frame(
  x=c(181,432,681,940,1058,1334,1416,1481,1529),
  y=687 - 
    c(395,434,414,413,435,496,522,504,486),
  I_col = rep(1,9),
  I_path = rep(3,9)
)

coord_path_4 <-data.frame(
  x=c(1334,1390,1450),
  y=687 - 
    c(496,474,428),
  I_col = rep(1,3),
  I_path = rep(4,3)
)

coord_path_5 <-data.frame(
  x=c(1390,1497),
  y=687 - 
    c(474,469),
  I_col =rep(1,2),
  I_path = rep(5,2)
)

coord_path_6 <-data.frame(
  x=c(1043,1098,1140,1238,1329,1390),
  y=687 - 
    c(246,353,385,424,469,474),
  I_col =rep(2,6),
  I_path = rep(6,6)
)

coord_path_7 <-data.frame(
  x=c(1238,1300,1394),
  y=687 - 
    c(424,392,398),
  I_col =rep(3,3),
  I_path = rep(7,3)
)

coord_path_8 <-data.frame(
  x=c(940,1140),
  y=687 - 
    c(413,385),
  I_col =rep(4,2),
  I_path = rep(8,2)
)

list_coord_path <- rbind(coord_path_1,coord_path_2,coord_path_3,coord_path_4,coord_path_5,coord_path_6,coord_path_7,
                         coord_path_8)
I_col <- c("lightblue2","steelblue1","royalblue3","royalblue3")


## Reorganize the ping data frame
plot_df <- df_jags %>% select(smolt_ID,Rx1,R1a,R1b,R2a,Rx2b,Rx2a,R2b,R3a,R3b)

## Going for a gradient, colorblind friendly palette
col_chan <-viridis(101,option="cividis")
plot(rep(1,101),col=col_chan,pch=19,cex=3)

#### Loop to generate Supplementaty material C ####
## when mode == 1 -> pdf with one page per individual
## when mode == 2 -> png figure for each individual

for (mode in 1:2){

if(mode ==1){ pdf("Figures/Suppl_Mat_C_M_5_smolt_travel_history_channel.pdf",width=6,height=2.5,pointsize=2)}
for (i in 1:data_ac$n_fish){#1)

## if we prefer to have individual images for each individual    
if(mode==2){ png(paste0("Figures/2022-individual_p/M_5_smolt_travel_history_channel_",plot_df$smolt_ID[i],".png"),width=1200,height=500,pointsize=19,type="cairo-png") }
  
  par(mfrow=c(1,1))
  par( mar=c(0,0,0,0))
  plot(500,500,xlim=c(1,1695),ylim=c(1,687), type='n', main="", xlab="", ylab="",asp=1,axes=F,
       yaxs = "i")
  # Get the plot information so the image will fill the plot box, and draw it
  lim <- par()
  rasterImage( channel_img , 
               xleft=1, xright=1695, 
               ybottom=1, ytop=687)
  ## Plot the paths allowed in the model
  temp_path <- list_coord_path %>% filter(I_col<=4)
  
  for( j in unique(temp_path$I_path)){
    temp_path2 <- temp_path %>% filter(I_path==j)
    points(temp_path2$x,temp_path2$y,type="l",lty=2,lwd=1,
           col = I_col[max(temp_path2$I_col)] )#  col="lightblue")
  }
  ## Plot the receivers
  for (j in 1:9){
    points(coord_sum$x_coord[j],coord_sum$y_coord[j],pch=22, 
           bg = ifelse(plot_df[i,j+1]==0 , "grey75", "deepskyblue3"), #coord_sum$col_bg[j]),
           cex =3 )
    text(coord_sum$x_text[j],coord_sum$y_text[j], labels=coord_sum$names_receivers[j],col="white",cex=1.3)
  }
  ##plot fish ID
  text(1500,25,paste0("Smolt ID#: ",plot_df$smolt_ID[i]),col="white",cex=1.2)
  
  ## plot the channel position
  for (j in 1:length(coord_chan$x)){
    points(coord_chan$x[j],coord_chan$y[j],pch=21,bg=col_chan[(mean_channel[i,j]+0.01)*100],cex=3)
    text(coord_chan$x[j],coord_chan$y[j],round(mean_channel[i,j],2)*100,cex=0.7,col="darkorange1")
  }
  
  legend(x=40,y=670,
         legend=c("Receivers","Detected","Not detected"),
         pt.bg=c(NA,"deepskyblue3","grey75"),
         pch=c(NA,22,22),pt.cex=c(NA,1.5,1.5),
         bg="white")
  legend(x=1200,y=670,
         legend=c("Probability to be in channel (%)","0","25","50","75","100"),
         pt.bg=c(NA,col_chan[c(1,26,51,76,101)]),
         pch=c(NA,rep(21,6)),pt.cex=c(NA,rep(1.5,6)),
         bg="white")
  
  if(mode == 2) {dev.off()}
} # fish loop
if(mode==1){dev.off()}

} ## End mode loop





